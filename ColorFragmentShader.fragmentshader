#version 330 core

// Interpolated values from the vertex shaders
in vec4 fragment_colour;
in vec2 UV;
in vec3 light_direction;
in vec3 light_direction_tangent_space;
in vec3 surface_normal;

out vec3 colour;

uniform sampler2D GRASS_TEXTURE;
uniform sampler2D NORMAL_MAP_TEXTURE;

void main()
{
  vec4 texture_colour = texture(GRASS_TEXTURE, UV);
  texture_colour = vec4(texture_colour.b, texture_colour.g, texture_colour.r, texture_colour.a);

  vec3 map_normal_colour = normalize(texture(NORMAL_MAP_TEXTURE, UV).rgb);
  vec3 map_normal = (map_normal_colour*2) - 1;

  vec3 normal = surface_normal;// * map_normal;

  colour = dot(light_direction, normal) * texture_colour.rgb * fragment_colour.rgb;

  // colour = (fragment_colour.rgb + 1)*0.5;


  // // Direction of the light (from the fragment to the light)
  // // Cosine of the angle between the normal and the light direction,
  // // clamped above 0
  // //  - light is at the vertical of the triangle -> 1
  // //  - light is perpendicular to the triangle -> 0
  // //  - light is behind the triangle -> 0
  // float cosTheta = clamp( dot(normal, light_direction_tangent_space), 0,1 );

  // colour = vec3(cosTheta, cosTheta, cosTheta);

  // colour = texture_colour.rgb;
}